import {
    addProjectConfiguration,
    formatFiles,
    generateFiles,
    names,
    Tree,
} from '@nx/devkit';
import * as path from 'path';
import { LibraryGeneratorSchema } from './schema';
import {
    addAutoloadToComposerJson,
    addDependenciesToComposerJson,
    ensureComposerJsonExists,
} from '../../lib/composer/composer-json';
import { phpunitGenerator } from '../phpunit/generator';
import { addReplaceToComposerJson } from '../../lib/composer/composer-json';
import psalmGenerator from '../psalm/generator';

export async function libraryGenerator(
    tree: Tree,
    options: LibraryGeneratorSchema
) {
    const projectRoot = options.directory;
    const packageName = `${options.packageNamespace}/${
        names(options.name).fileName
    }`;

    addProjectConfiguration(tree, options.name, {
        root: projectRoot,
        projectType: 'library',
        tags: ['lang:php', 'composer'],
        namedInputs: {
            default: ['{projectRoot}', '!{projectRoot}/vendor'],
            tests: ['{projectRoot}/tests/**/*'],
            production: ['default', '!tests'],
            composer: ['{projectRoot}/composer.json'],
        },
        sourceRoot: `${projectRoot}/src`,
        targets: {
            build: {
                executor: '@shrd/nx-php:archive',
                cache: true,
                options: {
                    outputFile: path.join(
                        'dist/composer-archives',
                        `${options.name}.zip`
                    ),
                },
                inputs: ['default'],
                dependsOn: [],
                outputs: ['{options.outputFile}'],
            },
            lint: {
                executor: '@shrd/nx-php:lint',
                cache: true,
                options: {
                    patterns: [`${projectRoot}/src/**/*.ts`],
                },
                dependsOn: [],
                inputs: [`{projectRoot}/src/**/*.ts`],
                outputs: [],
            },
        },
    });

    const composerJsonPath = path.join(projectRoot, 'composer.json');

    let srcNamespace = options.namespace;
    if (!srcNamespace.endsWith('\\')) {
        srcNamespace += '\\';
    }

    // CREATE composer.json
    ensureComposerJsonExists(tree, composerJsonPath, {
        name: packageName,
        type: 'library',
        autoload: {
            'psr-4': {
                [srcNamespace]: 'src/',
            },
        },
        'autoload-dev': {},
        archive: {
            name: options.name,
            exclude: [
                '/project.json',
                '/vendor',
                'tmp/',
                '*.log',
                '.phpunit.cache/',
                '.phpunit.result.cache',
                '.DS_Store',
                '.idea',
            ],
        },
        config: {
            'archive-format': 'zip',
            'archive-dir': path.relative(
                projectRoot,
                path.join('dist/composer-archives', options.name)
            ),
            'bin-dir': path.relative(projectRoot, 'vendor/bin'),
            'vendor-dir': path.relative(projectRoot, 'vendor'),
            'use-parent-dir': true,
            lock: false,
            'discard-changes': false,
        },
        _comment: ['Generated by nx-generator @shrd/nx-php:library'],
    });

    addDependenciesToComposerJson(
        tree,
        { php: '^8.2' },
        {},
        composerJsonPath,
        true
    );

    // Updating the root composer json.
    addDependenciesToComposerJson(tree, { [packageName]: '*' }, {});
    addReplaceToComposerJson(tree, packageName);
    addAutoloadToComposerJson(
        tree,
        {
            'psr-4': {
                [srcNamespace]: path.join(projectRoot, 'src'),
            },
        },
        {}
    );

    generateFiles(tree, path.join(__dirname, 'files'), projectRoot, {
        ...names(options.name),
        packageName,
        namespace: options.namespace,
    });

    switch (options.testing) {
        case 'phpunit':
            await phpunitGenerator(tree, {
                project: options.name,
                sourceDir: path.join(projectRoot, 'src'),
                testNamespace: `${srcNamespace}Tests`,
                vendorDir: 'vendor',
            });
            break;

        case 'pest':
            throw new Error('Pest testing is not implemented yet.');

        case 'none':
        default:
    }

    switch (options.typechecker) {
        case 'psalm':
            await psalmGenerator(tree, {
                project: options.name,
                sourceDir: path.join(projectRoot, 'src'),
                composerJson: composerJsonPath,
                vendorDir: 'vendor',
            });
            break;
        case 'phpstan':
            throw new Error(`PHPStan typechecking is not implemented yet.`);

        case 'none':
        default:
    }

    await formatFiles(tree);
}

export default libraryGenerator;
